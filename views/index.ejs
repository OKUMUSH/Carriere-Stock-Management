<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.6.0/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>/* üìå Masa√ºst√º ƒ∞√ßin Standart Tablo */
        .desktop-table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }
        
        .desktop-table th, .desktop-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
            vertical-align: middle;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        @media screen and (max-width: 768px) {
    table {
        display: none; /* Masa√ºst√º i√ßin tabloyu sakla */
    }

    .mobile-stock-list {
        display: block;
    }

    .stock-card {
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 10px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .stock-card h3 {
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }

    .stock-card p {
        font-size: 14px;
        color: #666;
    }

    .stock-card .actions {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    .stock-card button {
        font-size: 14px;
        padding: 6px 12px;
    }
}

/* Masa√ºst√º g√∂r√ºn√ºmde kartlarƒ± gizle */
@media screen and (min-width: 769px) {
    .mobile-stock-list {
        display: none;
    }
}
    </style>
</head>
<body class="bg-gray-100 p-6">

    <div class="max-w-6xl mx-auto bg-white shadow-lg rounded-lg p-6">
        <h1 class="text-3xl font-bold mb-4 text-center">üõí Stock Management</h1>

        <!-- üö® Threshold Uyarƒ±sƒ± -->
        <div id="lowStockWarning" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 hidden">
            <h2 class="text-lg font-bold">‚ö†Ô∏è Low Stock Alert!</h2>
            <ul id="lowStockList" class="list-disc pl-4"></ul>
        </div>

        <!-- üìå Yeni √úr√ºn Ekleme Formu -->
        <form id="addStockForm" class="mb-6 bg-gray-200 p-4 rounded-lg">
            <h2 class="text-xl font-semibold mb-2">‚ûï Add New Item</h2>
            <div class="grid grid-cols-2 gap-4">
                <select id="category" required class="p-2 border rounded">
                    <option value="Shoes">Shoes</option>
                    <option value="Jacket">Jacket</option>
                    <option value="Hat">Hat</option>
                    <option value="Gloves">Gloves</option>
                </select>
                <input type="text" id="brand" placeholder="Brand" required class="p-2 border rounded">
                <input type="text" id="model" placeholder="Model" required class="p-2 border rounded">
                <input type="text" id="size" placeholder="Size" required class="p-2 border rounded">
                <input type="number" id="stock" placeholder="Stock" required class="p-2 border rounded">
                <input type="number" id="lowStockThreshold" placeholder="Threshold" required class="p-2 border rounded">
            </div>
            <button type="submit" class="mt-4 bg-green-500 text-white px-4 py-2 rounded">Add Item</button>
        </form>

        <!-- üìã Stok Listesi -->
        <div class="stock-table-container max-w-6xl mx-auto bg-white shadow-lg rounded-lg p-6">
            <h1 class="text-3xl font-bold mb-4 text-center">üì¶ Stock List</h2>
            <table class="desktop-table">
                <thead>
                    <tr class="bg-gray-200">
                        <th onclick="sortTable('category')">Category ‚¨ç</th>
                        <th onclick="sortTable('brand')">Brand ‚¨ç</th>
                        <th onclick="sortTable('model')">Model ‚¨ç</th>
                        <th onclick="sortTable('size')">Size ‚¨ç</th>
                        <th onclick="sortTable('stock')">Stock ‚¨ç</th>
                        <th>Threshold</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="stockTable">
                    <% stocks.forEach(stock => { %>
                        <tr id="row-<%= stock._id %>">
                            <td><%= stock.category %></td>
                            <td><%= stock.brand %></td>
                            <td><%= stock.model %></td>
                            <td><%= stock.size %></td>
                            <td><%= stock.stock %></td>
                            <td><%= stock.lowStockThreshold %></td>
                            <td>
                                <button onclick="editStock('<%= stock._id %>')" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
                                <button onclick="deleteStock('<%= stock._id %>')" class="bg-red-500 text-white px-2 py-1 rounded ml-2">Delete</button>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
        <<!-- üì± Mobil ƒ∞√ßin Stock List -->
    <div class="mobile-stock-list">
        <% stocks.forEach(stock => { %>
            <div class="stock-card">
                <h3><%= stock.category %> - <%= stock.brand %> (<%= stock.model %>)</h3>
                <p><strong>Size:</strong> <%= stock.size %></p>
                <p><strong>Stock:</strong> <%= stock.stock %> | <strong>Threshold:</strong> <%= stock.lowStockThreshold %></p>
                
                <div class="actions">
                    <button onclick="editStock('<%= stock._id %>')" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
                    <button onclick="deleteStock('<%= stock._id %>')" class="bg-red-500 text-white px-2 py-1 rounded">Delete</button>
                </div>
            </div>
        <% }) %>
    </div>

    
        <div class="mt-4 flex justify-end gap-2">
            <button onclick="downloadPDF()" class="bg-red-500 text-white px-4 py-2 rounded">üìÑ Download PDF</button>
            <button onclick="downloadExcel()" class="bg-green-500 text-white px-4 py-2 rounded">üìä Download Excel</button>
            <button onclick="printTable()" class="bg-blue-500 text-white px-4 py-2 rounded">üñ®Ô∏è Print</button>
        </div>
    </div>

    <script>
        function stockChecker() {
            document.querySelectorAll("#stockTable tr").forEach(row => {
                let stock = parseInt(row.children[4].innerText);
                let threshold = parseInt(row.children[5].innerText);

                if (stock <= threshold) {
                    row.classList.add("low-stock");
                } else if (stock - threshold <= 2) {
                    row.classList.add("near-threshold");
                } else {
                    row.classList.remove("low-stock", "near-threshold");
                }
            });
        }

        function downloadPDF() {
            const doc = new jsPDF();
            doc.text("Stock List", 14, 10);
            doc.autoTable({ html: "#stockTable" });
            doc.save("Stock_List.pdf");
        }

        function downloadExcel() {
            let wb = XLSX.utils.table_to_book(document.querySelector("table"));
            XLSX.writeFile(wb, "Stock_Report.xlsx");
        }

        function printTable() {
            let printContents = document.querySelector(".stock-table-container").innerHTML;
            let originalContents = document.body.innerHTML;
            document.body.innerHTML = printContents;
            window.print();
            document.body.innerHTML = originalContents;
        }

        document.addEventListener("DOMContentLoaded", stockChecker);
    </script>

</body>
</html>
<script>
    // Run stock check on page load
    document.addEventListener("DOMContentLoaded", () => {
        stockChecker();
        renderMobileTable();
    });
    function renderMobileTable() {
        let mobileList = document.getElementById("mobileStockList");
        mobileList.innerHTML = "";
        
        document.querySelectorAll("#stockTable tr").forEach(row => {
            let cells = row.getElementsByTagName("td");
            let stockId = row.id.split("-")[1];
            let mobileItem = `
                <div class="mobile-item">
                    <div><strong>Category:</strong> <span>${cells[0].innerText}</span></div>
                    <div><strong>Brand:</strong> <span>${cells[1].innerText}</span></div>
                    <div><strong>Model:</strong> <span>${cells[2].innerText}</span></div>
                    <div><strong>Size:</strong> <span>${cells[3].innerText}</span></div>
                    <div><strong>Stock:</strong> <span>${cells[4].innerText}</span></div>
                    <div class="threshold-column"><strong>Threshold:</strong> <span>${cells[5].innerText}</span></div>
                    <div class="actions-column">
                        <button onclick="editStock('${stockId}')" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
                        <button onclick="deleteStock('${stockId}')" class="bg-red-500 text-white px-2 py-1 rounded ml-2">Delete</button>
                    </div>
                </div>
            `;
            mobileList.innerHTML += mobileItem;
        });
    }

    // ‚úÖ Function to check low stock items and display alerts
    function stockChecker() {
        let lowStockList = document.getElementById("lowStockList");
        let lowStockWarning = document.getElementById("lowStockWarning");

        let rows = document.querySelectorAll("#stockTable tr");
        let lowStockItems = [];

        rows.forEach(row => {
            let cells = row.querySelectorAll("td");
            let stock = parseInt(cells[4].innerText, 10);
            let threshold = parseInt(cells[5].innerText, 10);

            // Highlight row if stock is at or below threshold
            if (stock <= threshold) {
                lowStockItems.push(`${cells[0].innerText} ${cells[1].innerText}-${cells[2].innerText} (Size: ${cells[3].innerText}) - Stock: ${stock}`);
                row.classList.add("bg-yellow-200");
            } else {
                row.classList.remove("bg-yellow-200");
            }
        });

        // Show alert if there are low stock items
        if (lowStockItems.length > 0) {
            lowStockWarning.classList.remove("hidden");
            lowStockList.innerHTML = lowStockItems.map(item => `<li>${item}</li>`).join("");
        }
    }

    $(document).ready(() => {
        // ‚úÖ Handle new stock item submission via AJAX
        $("#addStockForm").submit(function (event) {
            event.preventDefault();
            let stockData = {
                category: $("#category").val(),
                brand: $("#brand").val(),
                model: $("#model").val(),
                size: $("#size").val(),
                stock: $("#stock").val(),
                lowStockThreshold: $("#lowStockThreshold").val()
            };

            $.post("/stock/add", JSON.stringify(stockData), function (response) {
                // Add the new stock item to the table without refreshing
                $("#stockTable").append(`
                    <tr id="row-${response._id}">
                        <td>${stockData.category}</td>
                        <td>${stockData.brand}</td>
                        <td>${stockData.model}</td>
                        <td>${stockData.size}</td>
                        <td>${stockData.stock}</td>
                        <td>${stockData.lowStockThreshold}</td>
                        <td>
                            <button onclick="editStock('${response._id}')" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
                            <button onclick="deleteStock('${response._id}')" class="bg-red-500 text-white px-2 py-1 rounded ml-2">Delete</button>
                        </td>
                    </tr>
                `);
                stockChecker();
                $("#addStockForm")[0].reset();
                showToast("‚úÖ Stock item added successfully!", "success");
            }).fail(xhr => showToast(`‚ùå Error adding stock: ${xhr.responseText}`, "error"));
        });
    });

    // ‚úÖ Function to delete stock item with confirmation
    function deleteStock(id) {
        if (!confirm("‚ùó Are you sure you want to delete this stock?")) return;
        fetch(`/stock/delete/${id}`, { method: "POST", headers: { "Content-Type": "application/json" } })
        .then(response => response.ok ? response.json() : response.json().then(err => { throw new Error(err.message); }))
        .then(() => {
            document.getElementById(`row-${id}`).remove();
            showToast("‚úÖ Stock deleted successfully!", "success");
        })
        .catch(error => showToast(`‚ùå Error deleting stock: ${error.message}`, "error"));
    }

    // ‚úÖ Function to edit stock item in place
    function editStock(id) {
        let row = document.getElementById(`row-${id}`);
        let cells = row.getElementsByTagName("td");

        // Save original data to restore on cancel
        row.dataset.original = JSON.stringify({
            category: cells[0].innerText, brand: cells[1].innerText, model: cells[2].innerText,
            size: cells[3].innerText, stock: cells[4].innerText, threshold: cells[5].innerText
        });

        // Replace table cells with editable inputs
        cells[0].innerHTML = `<select id="edit-category-${id}" class="border p-1 w-full">
            <option value="Shoes">Shoes</option>
            <option value="Jacket">Jacket</option>
            <option value="Hat">Hat</option>
            <option value="Gloves">Gloves</option>
        </select>`;
        cells[1].innerHTML = `<input type="text" id="edit-brand-${id}" value="${cells[1].innerText}" class="border p-1">`;
        cells[2].innerHTML = `<input type="text" id="edit-model-${id}" value="${cells[2].innerText}" class="border p-1">`;
        cells[3].innerHTML = `<input type="text" id="edit-size-${id}" value="${cells[3].innerText}" class="border p-1">`;
        cells[4].innerHTML = `<input type="number" id="edit-stock-${id}" value="${cells[4].innerText}" class="border p-1">`;
        cells[5].innerHTML = `<input type="number" id="edit-threshold-${id}" value="${cells[5].innerText}" class="border p-1">`;

        // Add Save and Cancel buttons
        cells[6].innerHTML = `
            <button onclick="saveStock('${id}')" class="bg-green-500 text-white px-2 py-1 rounded">Save</button>
            <button onclick="cancelEdit('${id}')" class="bg-gray-500 text-white px-2 py-1 rounded ml-2">Cancel</button>
        `;
    }

    // ‚úÖ Function to save edited stock item
    function saveStock(id) {
        let row = document.getElementById(`row-${id}`);
        let updatedStock = {
            category: document.getElementById(`edit-category-${id}`).value,
            brand: document.getElementById(`edit-brand-${id}`).value,
            model: document.getElementById(`edit-model-${id}`).value,
            size: document.getElementById(`edit-size-${id}`).value,
            stock: parseInt(document.getElementById(`edit-stock-${id}`).value, 10),
            threshold: parseInt(document.getElementById(`edit-threshold-${id}`).value, 10)
        };

        fetch(`/stock/update/${id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(updatedStock) })
        .then(response => response.json())
        .then(() => {
            // Replace editable fields with updated values
            row.innerHTML = `
                <td>${updatedStock.category}</td>
                <td>${updatedStock.brand}</td>
                <td>${updatedStock.model}</td>
                <td>${updatedStock.size}</td>
                <td>${updatedStock.stock}</td>
                <td>${updatedStock.threshold}</td>
                <td>
                    <button onclick="editStock('${id}')" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
                    <button onclick="deleteStock('${id}')" class="bg-red-500 text-white px-2 py-1 rounded ml-2">Delete</button>
                </td>
            `;
            showToast("‚úÖ Stock updated successfully!", "success");
            stockChecker();
        })
        .catch(error => showToast(`‚ùå Error updating stock: ${error.message}`, "error"));
    }

    // ‚úÖ Function to cancel edit and restore original values
    function cancelEdit(id) {
        let row = document.getElementById(`row-${id}`);
        let originalData = JSON.parse(row.dataset.original);
        row.innerHTML = `
            <td>${originalData.category}</td>
            <td>${originalData.brand}</td>
            <td>${originalData.model}</td>
            <td>${originalData.size}</td>
            <td>${originalData.stock}</td>
            <td>${originalData.threshold}</td>
            <td>
                <button onclick="editStock('${id}')" class="bg-blue-500 text-white px-2 py-1 rounded">Edit</button>
                <button onclick="deleteStock('${id}')" class="bg-red-500 text-white px-2 py-1 rounded ml-2">Delete</button>
            </td>
        `;
    }

    // ‚úÖ Function to show toast notifications
    function showToast(message, type = "success") {
        let toast = $(`<div class="p-3 text-white rounded-lg shadow-lg ${type === "success" ? "bg-green-500" : "bg-red-500"}">${message}</div>`);
        $("#toast-container").append(toast);
        setTimeout(() => toast.fadeOut(400, () => toast.remove()), 3000);
    }
</script>