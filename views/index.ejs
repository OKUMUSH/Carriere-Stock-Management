<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Management</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 p-5">
    <div class="max-w-5xl mx-auto bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-2xl font-bold mb-4 text-center">Stock Management</h2>

        <!-- Add New Stock -->
        <div class="bg-gray-200 p-4 rounded-lg mb-6 shadow-md">   
            <h3 class="text-lg font-semibold mb-2">Add New Stock</h3>
            <form id="add-stock-form" class="flex flex-wrap gap-2 items-center justify-center w-full">
                <input type="text" name="itemName" placeholder="Item Name" required class="p-2 border rounded w-1/4">
                <input type="number" name="quantity" placeholder="Quantity" required class="p-2 border rounded w-1/4">
                <input type="number" name="threshold" placeholder="Threshold" required class="p-2 border rounded w-1/4">
                <input type="text" name="updatedBy" placeholder="Created By" required class="p-2 border rounded w-1/4">
                <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded">Add Stock</button>
            </form>
        </div>
        
        <!-- Filters -->
        <div class="mb-4 flex flex-wrap gap-2 justify-between">
            <input type="text" id="search" placeholder="Search item..." class="p-2 border rounded w-1/3">
            <select id="filter-stock" class="p-2 border rounded w-1/3">
                <option value="all">All</option>
                <option value="low">Low Stock</option>
                <option value="critical">Critical Stock</option>
            </select>
        </div>
        
        <!-- Stock Table -->
        <div class="overflow-x-auto">
            <table class="w-full border-collapse border border-gray-300">
                <thead>
                    <tr class="bg-gray-200">
                        <th class="border p-2">Item</th>
                        <th class="border p-2">Quantity</th>
                        <th class="border p-2">Threshold</th>
                        <th class="border p-2">Last Updated By</th>
                        <th class="border p-2">Actions</th>
                    </tr>
                </thead>
                <tbody id="stock-list">
                    <% stocks.sort((a, b) => a.itemName.localeCompare(b.itemName)).forEach(stock => { %>
                        <tr class="border" data-stock="<%= stock.quantity %>" data-name="<%= stock.itemName.toLowerCase() %>" data-threshold="<%= stock.threshold %>">
                            <td class="border p-2"><%= stock.itemName %></td>
                            <td class="border p-2">
                                <form id="update-stock-form-<%= stock._id %>" action="/update-stock/<%= stock._id %>" method="POST" class="update-stock-form">
                                    <input type="number" name="quantity" value="<%= stock.quantity %>" class="w-full p-1 border rounded" disabled>
                            </td>
                            <td class="border p-2">
                                    <input type="number" name="threshold" value="<%= stock.threshold %>" class="w-full p-1 border rounded" disabled>
                            </td>
                            <td class="border p-2">
                                <input type="text" name="updatedBy" value="<%= stock.updatedBy %>" class="w-full p-1 border rounded" disabled>
                            </td>
                            <td class="border p-2 flex gap-2">
                                    <button type="button" class="edit-button bg-yellow-500 text-white px-2 py-1 rounded">Edit</button>
                                    <button type="submit" class="save-button bg-blue-500 text-white px-2 py-1 rounded hidden">Save</button>
                                    <button type="button" class="cancel-button bg-gray-500 text-white px-2 py-1 rounded hidden">Cancel</button>
                                    <button type="button" class="delete-button bg-red-500 text-white px-2 py-1 rounded hidden">Delete</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
        
        <!-- Stock History -->
        <h2 class="text-2xl font-bold mt-6 mb-4 text-center">Stock Change History</h2>
        <div class="overflow-x-auto">
            <table class="w-full border-collapse border border-gray-300">
                <thead>
                    <tr class="bg-gray-200">
                        <th class="border p-2">Item</th>
                        <th class="border p-2">Change</th>
                        <th class="border p-2">Changed By</th>
                        <th class="border p-2">Timestamp</th>
                        <th class="border p-2">Actions</th>
                    </tr>
                </thead>
                <tbody id="history-list">
                    <% history.forEach(log => { %>
                        <tr class="border">
                            <td class="border p-2"><%= log.itemName %></td>
                            <td class="border p-2"><%= log.change %></td>
                            <td class="border p-2"><%= log.changedBy %></td>
                            <td class="border p-2"><%= log.timestamp.toLocaleString() %></td>
                            <td class="border p-2">
                                <form action="/delete-history/<%= log._id %>" method="POST" class="delete-history-form inline">
                                    <button type="submit" class="bg-gray-500 text-white px-2 py-1 rounded">Delete Log</button>
                                </form>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            // Handle form submission via AJAX for adding new stock
            $('#add-stock-form').on('submit', function(event) {
                event.preventDefault();
                const form = $(this);
                const formData = form.serialize();

                $.ajax({
                    type: 'POST',
                    url: '/stock',
                    data: formData,
                    success: function(response) {
                        console.log('Add successful:', response); // Debug log
                        // Add the new stock to the table
                        const newRow = `
                            <tr class="border" data-stock="${response.stock.quantity}" data-name="${response.stock.itemName.toLowerCase()}" data-threshold="${response.stock.threshold}">
                                <td class="border p-2">${response.stock.itemName}</td>
                                <td class="border p-2">
                                    <form id="update-stock-form-${response.stock._id}" action="/update-stock/${response.stock._id}" method="POST" class="update-stock-form">
                                        <input type="number" name="quantity" value="${response.stock.quantity}" class="w-full p-1 border rounded" disabled>
                                </td>
                                <td class="border p-2">
                                        <input type="number" name="threshold" value="${response.stock.threshold}" class="w-full p-1 border rounded" disabled>
                                </td>
                                <td class="border p-2">
                                    <input type="text" name="updatedBy" value="${response.stock.updatedBy}" class="w-full p-1 border rounded" disabled>
                                </td>
                                <td class="border p-2 flex gap-2">
                                        <button type="button" class="edit-button bg-yellow-500 text-white px-2 py-1 rounded">Edit</button>
                                        <button type="submit" class="save-button bg-blue-500 text-white px-2 py-1 rounded hidden">Save</button>
                                        <button type="button" class="cancel-button bg-gray-500 text-white px-2 py-1 rounded hidden">Cancel</button>
                                        <button type="button" class="delete-button bg-red-500 text-white px-2 py-1 rounded hidden">Delete</button>
                                    </form>
                                </td>
                            </tr>
                        `;
                        $('#stock-list').append(newRow);
                        form[0].reset(); // Reset the form

                        // Update the history section with the new log
                        const historyRow = `
                            <tr class="border">
                                <td class="border p-2">${response.history.itemName}</td>
                                <td class="border p-2">${response.history.change}</td>
                                <td class="border p-2">${response.history.changedBy}</td>
                                <td class="border p-2">${new Date(response.history.timestamp).toLocaleString()}</td>
                                <td class="border p-2">
                                    <form action="/delete-history/${response.history._id}" method="POST" class="delete-history-form inline">
                                        <button type="submit" class="bg-gray-500 text-white px-2 py-1 rounded">Delete Log</button>
                                    </form>
                                </td>
                            </tr>
                        `;
                        $('#history-list').prepend(historyRow);
                        applyFilters(); // Apply filters to the updated stock list
                        Swal.fire('Success', 'Stock added successfully!', 'success');
                    },
                    error: function(error) {
                        console.error('Error adding stock:', error);
                        Swal.fire('Error', 'Failed to add stock.', 'error');
                    }
                });
            });

            // Handle form submission via AJAX for updating stock
            $(document).on('submit', '.update-stock-form', function(event) {
                event.preventDefault();
                const form = $(this);
                const formData = form.serialize();
                const actionUrl = form.attr('action');

                $.ajax({
                    type: 'POST',
                    url: actionUrl,
                    data: formData,
                    success: function(response) {
                        console.log('Update successful:', response); // Debug log
                        // Update the table row with the new data
                        const row = form.closest('tr');
                        row.attr('data-stock', response.stock.quantity);
                        row.attr('data-threshold', response.stock.threshold);
                        row.find('input[name="quantity"]').val(response.stock.quantity);
                        row.find('input[name="threshold"]').val(response.stock.threshold);
                        row.find('input[name="updatedBy"]').val(response.stock.updatedBy);

                        // Update the history section with the new log
                        const historyRow = `
                            <tr class="border">
                                <td class="border p-2">${response.history.itemName}</td>
                                <td class="border p-2">${response.history.change}</td>
                                <td class="border p-2">${response.history.changedBy}</td>
                                <td class="border p-2">${new Date(response.history.timestamp).toLocaleString()}</td>
                                <td class="border p-2">
                                    <form action="/delete-history/${response.history._id}" method="POST" class="delete-history-form inline">
                                        <button type="submit" class="bg-gray-500 text-white px-2 py-1 rounded">Delete Log</button>
                                    </form>
                                </td>
                            </tr>
                        `;
                        $('#history-list').prepend(historyRow);
                        applyFilters(); // Apply filters to the updated stock list
                        Swal.fire('Success', 'Stock updated successfully!', 'success');
                    },
                    error: function(error) {
                        console.error('Error updating stock:', error);
                        Swal.fire('Error', 'Failed to update stock.', 'error');
                    }
                });
            });

            // Handle delete stock via AJAX
            $(document).on('click', '.delete-button', function(event) {
                event.preventDefault();
                const form = $(this).closest('form');
                const actionUrl = form.attr('action');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            type: 'POST',
                            url: actionUrl,
                            success: function(response) {
                                console.log('Delete successful:', response); // Debug log
                                // Remove the table row
                                form.closest('tr').remove();

                                // Update the history section with the new log
                                const historyRow = `
                                    <tr class="border">
                                        <td class="border p-2">${response.history.itemName}</td>
                                        <td class="border p-2">${response.history.change}</td>
                                        <td class="border p-2">${response.history.changedBy}</td>
                                        <td class="border p-2">${new Date(response.history.timestamp).toLocaleString()}</td>
                                        <td class="border p-2">
                                            <form action="/delete-history/${response.history._id}" method="POST" class="delete-history-form inline">
                                                <button type="submit" class="bg-gray-500 text-white px-2 py-1 rounded">Delete Log</button>
                                            </form>
                                        </td>
                                    </tr>
                                `;
                                $('#history-list').prepend(historyRow);
                                applyFilters(); // Apply filters to the updated stock list
                                Swal.fire('Deleted!', 'Stock has been deleted.', 'success');
                            },
                            error: function(error) {
                                console.error('Error deleting stock:', error);
                                Swal.fire('Error', 'Failed to delete stock.', 'error');
                            }
                        });
                    }
                });
            });

            // Handle delete history log via AJAX
            $(document).on('submit', '.delete-history-form', function(event) {
                event.preventDefault();
                const form = $(this);
                const actionUrl = form.attr('action');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            type: 'POST',
                            url: actionUrl,
                            success: function(response) {
                                console.log('Delete log successful:', response); // Debug log
                                // Remove the history row
                                form.closest('tr').remove();
                                Swal.fire('Deleted!', 'Log has been deleted.', 'success');
                            },
                            error: function(error) {
                                console.error('Error deleting log:', error);
                                Swal.fire('Error', 'Failed to delete log.', 'error');
                            }
                        });
                    }
                });
            });

            // Handle edit button click
            $(document).on('click', '.edit-button', function() {
                const form = $(this).closest('form');
                form.find('input').prop('disabled', false);
                form.find('.save-button, .cancel-button, .delete-button').removeClass('hidden');
                $(this).addClass('hidden');
            });

            // Handle cancel button click
            $(document).on('click', '.cancel-button', function() {
                const form = $(this).closest('form');
                form.find('input').prop('disabled', true);
                form.find('.save-button, .cancel-button, .delete-button').addClass('hidden');
                form.find('.edit-button').removeClass('hidden');
            });

            // Filtering and Searching
            $('#search').on('input', function() {
                applyFilters();
            });

            $('#filter-stock').on('change', function() {
                applyFilters();
            });

            function applyFilters() {
                let searchValue = $('#search').val().toLowerCase();
                let filterValue = $('#filter-stock').val();

                $('#stock-list tr').each(function() {
                    let stock = parseInt($(this).attr('data-stock')) || 0;
                    let threshold = parseInt($(this).attr('data-threshold')) || 0;
                    let name = $(this).attr('data-name');

                    let matchesSearch = name.includes(searchValue);
                    let matchesFilter = (filterValue === 'all') ||
                                        (filterValue === 'low' && stock <= threshold) ||
                                        (filterValue === 'critical' && stock === 0);

                    $(this).toggle(matchesSearch && matchesFilter);
                });
            }
        });
    </script>
</body>
</html>